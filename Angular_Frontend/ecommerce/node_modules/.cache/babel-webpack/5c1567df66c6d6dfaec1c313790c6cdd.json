{"ast":null,"code":"import { sleep, randomToken, PROMISE_RESOLVED_VOID, PROMISE_RESOLVED_TRUE } from './util.js';\nimport { add as unloadAdd } from 'unload';\n\nvar LeaderElection = function LeaderElection(broadcastChannel, options) {\n  var _this = this;\n\n  this.broadcastChannel = broadcastChannel;\n  this._options = options;\n  this.isLeader = false;\n  this.hasLeader = false;\n  this.isDead = false;\n  this.token = randomToken();\n  /**\n   * Apply Queue,\n   * used to ensure we do not run applyOnce()\n   * in parallel.\n   */\n\n  this._aplQ = PROMISE_RESOLVED_VOID; // amount of unfinished applyOnce() calls\n\n  this._aplQC = 0; // things to clean up\n\n  this._unl = []; // _unloads\n\n  this._lstns = []; // _listeners\n\n  this._dpL = function () {}; // onduplicate listener\n\n\n  this._dpLC = false; // true when onduplicate called\n\n  /**\n   * Even when the own instance is not applying,\n   * we still listen to messages to ensure the hasLeader flag\n   * is set correctly.\n   */\n\n  var hasLeaderListener = function hasLeaderListener(msg) {\n    if (msg.context === 'leader') {\n      if (msg.action === 'death') {\n        _this.hasLeader = false;\n      }\n\n      if (msg.action === 'tell') {\n        _this.hasLeader = true;\n      }\n    }\n  };\n\n  this.broadcastChannel.addEventListener('internal', hasLeaderListener);\n\n  this._lstns.push(hasLeaderListener);\n};\n\nLeaderElection.prototype = {\n  /**\n   * Returns true if the instance is leader,\n   * false if not.\n   * @async\n   */\n  applyOnce: function applyOnce( // true if the applyOnce() call came from the fallbackInterval cycle\n  isFromFallbackInterval) {\n    var _this2 = this;\n\n    if (this.isLeader) {\n      return sleep(0, true);\n    }\n\n    if (this.isDead) {\n      return sleep(0, false);\n    }\n    /**\n     * Already applying more then once,\n     * -> wait for the apply queue to be finished.\n     */\n\n\n    if (this._aplQC > 1) {\n      return this._aplQ;\n    }\n    /**\n     * Add a new apply-run\n     */\n\n\n    var applyRun = function applyRun() {\n      /**\n       * Optimization shortcuts.\n       * Directly return if a previous run\n       * has already elected a leader.\n       */\n      if (_this2.isLeader) {\n        return PROMISE_RESOLVED_TRUE;\n      }\n\n      var stopCriteria = false;\n      var stopCriteriaPromiseResolve;\n      /**\n       * Resolves when a stop criteria is reached.\n       * Uses as a performance shortcut so we do not\n       * have to await the responseTime when it is already clear\n       * that the election failed.\n       */\n\n      var stopCriteriaPromise = new Promise(function (res) {\n        stopCriteriaPromiseResolve = function stopCriteriaPromiseResolve() {\n          stopCriteria = true;\n          res();\n        };\n      });\n      var recieved = [];\n\n      var handleMessage = function handleMessage(msg) {\n        if (msg.context === 'leader' && msg.token != _this2.token) {\n          recieved.push(msg);\n\n          if (msg.action === 'apply') {\n            // other is applying\n            if (msg.token > _this2.token) {\n              /**\n               * other has higher token\n               * -> stop applying and let other become leader.\n               */\n              stopCriteriaPromiseResolve();\n            }\n          }\n\n          if (msg.action === 'tell') {\n            // other is already leader\n            stopCriteriaPromiseResolve();\n            _this2.hasLeader = true;\n          }\n        }\n      };\n\n      _this2.broadcastChannel.addEventListener('internal', handleMessage);\n      /**\n       * If the applyOnce() call came from the fallbackInterval,\n       * we can assume that the election runs in the background and\n       * not critical process is waiting for it.\n       * When this is true, we give the other intances\n       * more time to answer to messages in the election cycle.\n       * This makes it less likely to elect duplicate leaders.\n       * But also it takes longer which is not a problem because we anyway\n       * run in the background.\n       */\n\n\n      var waitForAnswerTime = isFromFallbackInterval ? _this2._options.responseTime * 4 : _this2._options.responseTime;\n\n      var applyPromise = _sendMessage(_this2, 'apply') // send out that this one is applying\n      .then(function () {\n        return Promise.race([sleep(waitForAnswerTime), stopCriteriaPromise.then(function () {\n          return Promise.reject(new Error());\n        })]);\n      }) // send again in case another instance was just created\n      .then(function () {\n        return _sendMessage(_this2, 'apply');\n      }) // let others time to respond\n      .then(function () {\n        return Promise.race([sleep(waitForAnswerTime), stopCriteriaPromise.then(function () {\n          return Promise.reject(new Error());\n        })]);\n      })[\"catch\"](function () {}).then(function () {\n        _this2.broadcastChannel.removeEventListener('internal', handleMessage);\n\n        if (!stopCriteria) {\n          // no stop criteria -> own is leader\n          return beLeader(_this2).then(function () {\n            return true;\n          });\n        } else {\n          // other is leader\n          return false;\n        }\n      });\n\n      return applyPromise;\n    };\n\n    this._aplQC = this._aplQC + 1;\n    this._aplQ = this._aplQ.then(function () {\n      return applyRun();\n    }).then(function () {\n      _this2._aplQC = _this2._aplQC - 1;\n    });\n    return this._aplQ.then(function () {\n      return _this2.isLeader;\n    });\n  },\n  awaitLeadership: function awaitLeadership() {\n    if (\n    /* _awaitLeadershipPromise */\n    !this._aLP) {\n      this._aLP = _awaitLeadershipOnce(this);\n    }\n\n    return this._aLP;\n  },\n\n  set onduplicate(fn) {\n    this._dpL = fn;\n  },\n\n  die: function die() {\n    var _this3 = this;\n\n    this._lstns.forEach(function (listener) {\n      return _this3.broadcastChannel.removeEventListener('internal', listener);\n    });\n\n    this._lstns = [];\n\n    this._unl.forEach(function (uFn) {\n      return uFn.remove();\n    });\n\n    this._unl = [];\n\n    if (this.isLeader) {\n      this.hasLeader = false;\n      this.isLeader = false;\n    }\n\n    this.isDead = true;\n    return _sendMessage(this, 'death');\n  }\n};\n/**\n * @param leaderElector {LeaderElector}\n */\n\nfunction _awaitLeadershipOnce(leaderElector) {\n  if (leaderElector.isLeader) {\n    return PROMISE_RESOLVED_VOID;\n  }\n\n  return new Promise(function (res) {\n    var resolved = false;\n\n    function finish() {\n      if (resolved) {\n        return;\n      }\n\n      resolved = true;\n      leaderElector.broadcastChannel.removeEventListener('internal', whenDeathListener);\n      res(true);\n    } // try once now\n\n\n    leaderElector.applyOnce().then(function () {\n      if (leaderElector.isLeader) {\n        finish();\n      }\n    });\n    /**\n     * Try on fallbackInterval\n     * @recursive\n     */\n\n    var tryOnFallBack = function tryOnFallBack() {\n      return sleep(leaderElector._options.fallbackInterval).then(function () {\n        if (leaderElector.isDead || resolved) {\n          return;\n        }\n\n        if (leaderElector.isLeader) {\n          finish();\n        } else {\n          return leaderElector.applyOnce(true).then(function () {\n            if (leaderElector.isLeader) {\n              finish();\n            } else {\n              tryOnFallBack();\n            }\n          });\n        }\n      });\n    };\n\n    tryOnFallBack(); // try when other leader dies\n\n    var whenDeathListener = function whenDeathListener(msg) {\n      if (msg.context === 'leader' && msg.action === 'death') {\n        leaderElector.hasLeader = false;\n        leaderElector.applyOnce().then(function () {\n          if (leaderElector.isLeader) {\n            finish();\n          }\n        });\n      }\n    };\n\n    leaderElector.broadcastChannel.addEventListener('internal', whenDeathListener);\n\n    leaderElector._lstns.push(whenDeathListener);\n  });\n}\n/**\n * sends and internal message over the broadcast-channel\n */\n\n\nfunction _sendMessage(leaderElector, action) {\n  var msgJson = {\n    context: 'leader',\n    action: action,\n    token: leaderElector.token\n  };\n  return leaderElector.broadcastChannel.postInternal(msgJson);\n}\n\nexport function beLeader(leaderElector) {\n  leaderElector.isLeader = true;\n  leaderElector.hasLeader = true;\n  var unloadFn = unloadAdd(function () {\n    return leaderElector.die();\n  });\n\n  leaderElector._unl.push(unloadFn);\n\n  var isLeaderListener = function isLeaderListener(msg) {\n    if (msg.context === 'leader' && msg.action === 'apply') {\n      _sendMessage(leaderElector, 'tell');\n    }\n\n    if (msg.context === 'leader' && msg.action === 'tell' && !leaderElector._dpLC) {\n      /**\n       * another instance is also leader!\n       * This can happen on rare events\n       * like when the CPU is at 100% for long time\n       * or the tabs are open very long and the browser throttles them.\n       * @link https://github.com/pubkey/broadcast-channel/issues/414\n       * @link https://github.com/pubkey/broadcast-channel/issues/385\n       */\n      leaderElector._dpLC = true;\n\n      leaderElector._dpL(); // message the lib user so the app can handle the problem\n\n\n      _sendMessage(leaderElector, 'tell'); // ensure other leader also knows the problem\n\n    }\n  };\n\n  leaderElector.broadcastChannel.addEventListener('internal', isLeaderListener);\n\n  leaderElector._lstns.push(isLeaderListener);\n\n  return _sendMessage(leaderElector, 'tell');\n}\n\nfunction fillOptionsWithDefaults(options, channel) {\n  if (!options) options = {};\n  options = JSON.parse(JSON.stringify(options));\n\n  if (!options.fallbackInterval) {\n    options.fallbackInterval = 3000;\n  }\n\n  if (!options.responseTime) {\n    options.responseTime = channel.method.averageResponseTime(channel.options);\n  }\n\n  return options;\n}\n\nexport function createLeaderElection(channel, options) {\n  if (channel._leaderElector) {\n    throw new Error('BroadcastChannel already has a leader-elector');\n  }\n\n  options = fillOptionsWithDefaults(options, channel);\n  var elector = new LeaderElection(channel, options);\n\n  channel._befC.push(function () {\n    return elector.die();\n  });\n\n  channel._leaderElector = elector;\n  return elector;\n}","map":{"version":3,"sources":["C:/Users/chico/Documents/Projects/E-Commerce/Angular_Frontend/ecommerce/node_modules/broadcast-channel/dist/esbrowser/leader-election.js"],"names":["sleep","randomToken","PROMISE_RESOLVED_VOID","PROMISE_RESOLVED_TRUE","add","unloadAdd","LeaderElection","broadcastChannel","options","_this","_options","isLeader","hasLeader","isDead","token","_aplQ","_aplQC","_unl","_lstns","_dpL","_dpLC","hasLeaderListener","msg","context","action","addEventListener","push","prototype","applyOnce","isFromFallbackInterval","_this2","applyRun","stopCriteria","stopCriteriaPromiseResolve","stopCriteriaPromise","Promise","res","recieved","handleMessage","waitForAnswerTime","responseTime","applyPromise","_sendMessage","then","race","reject","Error","removeEventListener","beLeader","awaitLeadership","_aLP","_awaitLeadershipOnce","onduplicate","fn","die","_this3","forEach","listener","uFn","remove","leaderElector","resolved","finish","whenDeathListener","tryOnFallBack","fallbackInterval","msgJson","postInternal","unloadFn","isLeaderListener","fillOptionsWithDefaults","channel","JSON","parse","stringify","method","averageResponseTime","createLeaderElection","_leaderElector","elector","_befC"],"mappings":"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","sourcesContent":["import { sleep, randomToken, PROMISE_RESOLVED_VOID, PROMISE_RESOLVED_TRUE } from './util.js';\nimport { add as unloadAdd } from 'unload';\nvar LeaderElection = function LeaderElection(broadcastChannel, options) {\n  var _this = this;\n  this.broadcastChannel = broadcastChannel;\n  this._options = options;\n  this.isLeader = false;\n  this.hasLeader = false;\n  this.isDead = false;\n  this.token = randomToken();\n\n  /**\n   * Apply Queue,\n   * used to ensure we do not run applyOnce()\n   * in parallel.\n   */\n  this._aplQ = PROMISE_RESOLVED_VOID;\n  // amount of unfinished applyOnce() calls\n  this._aplQC = 0;\n\n  // things to clean up\n  this._unl = []; // _unloads\n  this._lstns = []; // _listeners\n  this._dpL = function () {}; // onduplicate listener\n  this._dpLC = false; // true when onduplicate called\n\n  /**\n   * Even when the own instance is not applying,\n   * we still listen to messages to ensure the hasLeader flag\n   * is set correctly.\n   */\n  var hasLeaderListener = function hasLeaderListener(msg) {\n    if (msg.context === 'leader') {\n      if (msg.action === 'death') {\n        _this.hasLeader = false;\n      }\n      if (msg.action === 'tell') {\n        _this.hasLeader = true;\n      }\n    }\n  };\n  this.broadcastChannel.addEventListener('internal', hasLeaderListener);\n  this._lstns.push(hasLeaderListener);\n};\nLeaderElection.prototype = {\n  /**\n   * Returns true if the instance is leader,\n   * false if not.\n   * @async\n   */\n  applyOnce: function applyOnce(\n  // true if the applyOnce() call came from the fallbackInterval cycle\n  isFromFallbackInterval) {\n    var _this2 = this;\n    if (this.isLeader) {\n      return sleep(0, true);\n    }\n    if (this.isDead) {\n      return sleep(0, false);\n    }\n\n    /**\n     * Already applying more then once,\n     * -> wait for the apply queue to be finished.\n     */\n    if (this._aplQC > 1) {\n      return this._aplQ;\n    }\n\n    /**\n     * Add a new apply-run\n     */\n    var applyRun = function applyRun() {\n      /**\n       * Optimization shortcuts.\n       * Directly return if a previous run\n       * has already elected a leader.\n       */\n      if (_this2.isLeader) {\n        return PROMISE_RESOLVED_TRUE;\n      }\n      var stopCriteria = false;\n      var stopCriteriaPromiseResolve;\n      /**\n       * Resolves when a stop criteria is reached.\n       * Uses as a performance shortcut so we do not\n       * have to await the responseTime when it is already clear\n       * that the election failed.\n       */\n      var stopCriteriaPromise = new Promise(function (res) {\n        stopCriteriaPromiseResolve = function stopCriteriaPromiseResolve() {\n          stopCriteria = true;\n          res();\n        };\n      });\n      var recieved = [];\n      var handleMessage = function handleMessage(msg) {\n        if (msg.context === 'leader' && msg.token != _this2.token) {\n          recieved.push(msg);\n          if (msg.action === 'apply') {\n            // other is applying\n            if (msg.token > _this2.token) {\n              /**\n               * other has higher token\n               * -> stop applying and let other become leader.\n               */\n              stopCriteriaPromiseResolve();\n            }\n          }\n          if (msg.action === 'tell') {\n            // other is already leader\n            stopCriteriaPromiseResolve();\n            _this2.hasLeader = true;\n          }\n        }\n      };\n      _this2.broadcastChannel.addEventListener('internal', handleMessage);\n\n      /**\n       * If the applyOnce() call came from the fallbackInterval,\n       * we can assume that the election runs in the background and\n       * not critical process is waiting for it.\n       * When this is true, we give the other intances\n       * more time to answer to messages in the election cycle.\n       * This makes it less likely to elect duplicate leaders.\n       * But also it takes longer which is not a problem because we anyway\n       * run in the background.\n       */\n      var waitForAnswerTime = isFromFallbackInterval ? _this2._options.responseTime * 4 : _this2._options.responseTime;\n      var applyPromise = _sendMessage(_this2, 'apply') // send out that this one is applying\n      .then(function () {\n        return Promise.race([sleep(waitForAnswerTime), stopCriteriaPromise.then(function () {\n          return Promise.reject(new Error());\n        })]);\n      })\n      // send again in case another instance was just created\n      .then(function () {\n        return _sendMessage(_this2, 'apply');\n      })\n      // let others time to respond\n      .then(function () {\n        return Promise.race([sleep(waitForAnswerTime), stopCriteriaPromise.then(function () {\n          return Promise.reject(new Error());\n        })]);\n      })[\"catch\"](function () {}).then(function () {\n        _this2.broadcastChannel.removeEventListener('internal', handleMessage);\n        if (!stopCriteria) {\n          // no stop criteria -> own is leader\n          return beLeader(_this2).then(function () {\n            return true;\n          });\n        } else {\n          // other is leader\n          return false;\n        }\n      });\n      return applyPromise;\n    };\n    this._aplQC = this._aplQC + 1;\n    this._aplQ = this._aplQ.then(function () {\n      return applyRun();\n    }).then(function () {\n      _this2._aplQC = _this2._aplQC - 1;\n    });\n    return this._aplQ.then(function () {\n      return _this2.isLeader;\n    });\n  },\n  awaitLeadership: function awaitLeadership() {\n    if ( /* _awaitLeadershipPromise */\n    !this._aLP) {\n      this._aLP = _awaitLeadershipOnce(this);\n    }\n    return this._aLP;\n  },\n  set onduplicate(fn) {\n    this._dpL = fn;\n  },\n  die: function die() {\n    var _this3 = this;\n    this._lstns.forEach(function (listener) {\n      return _this3.broadcastChannel.removeEventListener('internal', listener);\n    });\n    this._lstns = [];\n    this._unl.forEach(function (uFn) {\n      return uFn.remove();\n    });\n    this._unl = [];\n    if (this.isLeader) {\n      this.hasLeader = false;\n      this.isLeader = false;\n    }\n    this.isDead = true;\n    return _sendMessage(this, 'death');\n  }\n};\n\n/**\n * @param leaderElector {LeaderElector}\n */\nfunction _awaitLeadershipOnce(leaderElector) {\n  if (leaderElector.isLeader) {\n    return PROMISE_RESOLVED_VOID;\n  }\n  return new Promise(function (res) {\n    var resolved = false;\n    function finish() {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      leaderElector.broadcastChannel.removeEventListener('internal', whenDeathListener);\n      res(true);\n    }\n\n    // try once now\n    leaderElector.applyOnce().then(function () {\n      if (leaderElector.isLeader) {\n        finish();\n      }\n    });\n\n    /**\n     * Try on fallbackInterval\n     * @recursive\n     */\n    var tryOnFallBack = function tryOnFallBack() {\n      return sleep(leaderElector._options.fallbackInterval).then(function () {\n        if (leaderElector.isDead || resolved) {\n          return;\n        }\n        if (leaderElector.isLeader) {\n          finish();\n        } else {\n          return leaderElector.applyOnce(true).then(function () {\n            if (leaderElector.isLeader) {\n              finish();\n            } else {\n              tryOnFallBack();\n            }\n          });\n        }\n      });\n    };\n    tryOnFallBack();\n\n    // try when other leader dies\n    var whenDeathListener = function whenDeathListener(msg) {\n      if (msg.context === 'leader' && msg.action === 'death') {\n        leaderElector.hasLeader = false;\n        leaderElector.applyOnce().then(function () {\n          if (leaderElector.isLeader) {\n            finish();\n          }\n        });\n      }\n    };\n    leaderElector.broadcastChannel.addEventListener('internal', whenDeathListener);\n    leaderElector._lstns.push(whenDeathListener);\n  });\n}\n\n/**\n * sends and internal message over the broadcast-channel\n */\nfunction _sendMessage(leaderElector, action) {\n  var msgJson = {\n    context: 'leader',\n    action: action,\n    token: leaderElector.token\n  };\n  return leaderElector.broadcastChannel.postInternal(msgJson);\n}\nexport function beLeader(leaderElector) {\n  leaderElector.isLeader = true;\n  leaderElector.hasLeader = true;\n  var unloadFn = unloadAdd(function () {\n    return leaderElector.die();\n  });\n  leaderElector._unl.push(unloadFn);\n  var isLeaderListener = function isLeaderListener(msg) {\n    if (msg.context === 'leader' && msg.action === 'apply') {\n      _sendMessage(leaderElector, 'tell');\n    }\n    if (msg.context === 'leader' && msg.action === 'tell' && !leaderElector._dpLC) {\n      /**\n       * another instance is also leader!\n       * This can happen on rare events\n       * like when the CPU is at 100% for long time\n       * or the tabs are open very long and the browser throttles them.\n       * @link https://github.com/pubkey/broadcast-channel/issues/414\n       * @link https://github.com/pubkey/broadcast-channel/issues/385\n       */\n      leaderElector._dpLC = true;\n      leaderElector._dpL(); // message the lib user so the app can handle the problem\n      _sendMessage(leaderElector, 'tell'); // ensure other leader also knows the problem\n    }\n  };\n\n  leaderElector.broadcastChannel.addEventListener('internal', isLeaderListener);\n  leaderElector._lstns.push(isLeaderListener);\n  return _sendMessage(leaderElector, 'tell');\n}\nfunction fillOptionsWithDefaults(options, channel) {\n  if (!options) options = {};\n  options = JSON.parse(JSON.stringify(options));\n  if (!options.fallbackInterval) {\n    options.fallbackInterval = 3000;\n  }\n  if (!options.responseTime) {\n    options.responseTime = channel.method.averageResponseTime(channel.options);\n  }\n  return options;\n}\nexport function createLeaderElection(channel, options) {\n  if (channel._leaderElector) {\n    throw new Error('BroadcastChannel already has a leader-elector');\n  }\n  options = fillOptionsWithDefaults(options, channel);\n  var elector = new LeaderElection(channel, options);\n  channel._befC.push(function () {\n    return elector.die();\n  });\n  channel._leaderElector = elector;\n  return elector;\n}"]},"metadata":{},"sourceType":"module"}