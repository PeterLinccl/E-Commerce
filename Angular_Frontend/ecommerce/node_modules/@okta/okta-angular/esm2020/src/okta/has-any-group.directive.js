import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { OktaAuthStateService } from './services/auth-state.service';
import * as i0 from "@angular/core";
import * as i1 from "./services/auth-state.service";
export class OktaHasAnyGroupDirective {
    constructor(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    templateRef, viewContainer, authStateService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.authStateService = authStateService;
    }
    set oktaHasAnyGroup(groups) {
        this.authStateService.hasAnyGroups(groups)
            .subscribe(isAuthorized => {
            // don't update UI if no state change
            if (isAuthorized === this.previousIsAuthorized) {
                return;
            }
            this.previousIsAuthorized = isAuthorized;
            this.viewContainer.clear();
            if (isAuthorized) {
                this.viewContainer.createEmbeddedView(this.templateRef);
            }
        });
    }
}
OktaHasAnyGroupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: OktaHasAnyGroupDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: i1.OktaAuthStateService }], target: i0.ɵɵFactoryTarget.Directive });
OktaHasAnyGroupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.0", type: OktaHasAnyGroupDirective, selector: "[oktaHasAnyGroup]", inputs: { oktaHasAnyGroup: "oktaHasAnyGroup" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: OktaHasAnyGroupDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[oktaHasAnyGroup]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: i1.OktaAuthStateService }]; }, propDecorators: { oktaHasAnyGroup: [{
                type: Input
            }] } });
//# sourceMappingURL=has-any-group.directive.js.map