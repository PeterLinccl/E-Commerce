import { __awaiter } from "tslib";
/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import { NgModule, Inject, Optional, VERSION } from '@angular/core';
import { Router } from '@angular/router';
import { Location } from '@angular/common';
import { OktaCallbackComponent } from './components/callback.component';
import { OktaAuthGuard } from './okta.guard';
import { OktaAuthStateService } from './services/auth-state.service';
import { OktaHasAnyGroupDirective } from './has-any-group.directive';
import { OKTA_CONFIG, OKTA_AUTH } from './models/okta.config';
import { AuthSdkError, toRelativeUrl } from '@okta/okta-auth-js';
import { compare } from 'compare-versions';
import packageInfo from './packageInfo';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/router";
export function oktaAuthFactory(config) {
    return config.oktaAuth;
}
export class OktaAuthModule {
    constructor(config, location, router) {
        const { oktaAuth } = config;
        const isAuthJsSupported = oktaAuth._oktaUserAgent && compare(oktaAuth._oktaUserAgent.getVersion(), packageInfo.authJSMinSupportedVersion, '>=');
        if (!isAuthJsSupported) {
            throw new AuthSdkError(`Passed in oktaAuth is not compatible with the SDK, minimum supported okta-auth-js version is ${packageInfo.authJSMinSupportedVersion}.`);
        }
        // Add Okta UA
        oktaAuth._oktaUserAgent.addEnvironment(`${packageInfo.name}/${packageInfo.version}`);
        oktaAuth._oktaUserAgent.addEnvironment(`Angular/${VERSION.full}`);
        // Provide a default implementation of `restoreOriginalUri`
        if (!oktaAuth.options.restoreOriginalUri && router && location) {
            oktaAuth.options.restoreOriginalUri = (_, originalUri) => __awaiter(this, void 0, void 0, function* () {
                const baseUrl = window.location.origin + location.prepareExternalUrl('');
                const routePath = toRelativeUrl(originalUri || '/', baseUrl);
                router.navigateByUrl(routePath);
            });
        }
        // Start services
        oktaAuth.start();
    }
}
OktaAuthModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: OktaAuthModule, deps: [{ token: OKTA_CONFIG }, { token: i1.Location, optional: true }, { token: i2.Router, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });
OktaAuthModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: OktaAuthModule, declarations: [OktaCallbackComponent,
        OktaHasAnyGroupDirective], exports: [OktaCallbackComponent,
        OktaHasAnyGroupDirective] });
OktaAuthModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: OktaAuthModule, providers: [
        OktaAuthGuard,
        OktaAuthStateService,
        {
            provide: OKTA_AUTH,
            useFactory: oktaAuthFactory,
            deps: [OKTA_CONFIG]
        },
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: OktaAuthModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        OktaCallbackComponent,
                        OktaHasAnyGroupDirective,
                    ],
                    exports: [
                        OktaCallbackComponent,
                        OktaHasAnyGroupDirective,
                    ],
                    providers: [
                        OktaAuthGuard,
                        OktaAuthStateService,
                        {
                            provide: OKTA_AUTH,
                            useFactory: oktaAuthFactory,
                            deps: [OKTA_CONFIG]
                        },
                    ]
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [OKTA_CONFIG]
                }] }, { type: i1.Location, decorators: [{
                    type: Optional
                }] }, { type: i2.Router, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=okta.module.js.map