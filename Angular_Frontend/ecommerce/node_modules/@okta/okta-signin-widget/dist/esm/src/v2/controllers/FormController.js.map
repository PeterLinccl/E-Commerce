{"version":3,"file":"FormController.js","sources":["../../../../../src/v2/controllers/FormController.ts"],"sourcesContent":["/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { _, Controller, loc } from 'okta';\nimport ViewFactory from '../view-builder/ViewFactory';\nimport IonResponseHelper from '../ion/IonResponseHelper';\nimport { getV1ClassName } from '../ion/ViewClassNamesFactory';\nimport { FORMS, TERMINAL_FORMS, FORM_NAME_TO_OPERATION_MAP } from '../ion/RemediationConstants';\nimport Util from 'util/Util';\nimport sessionStorageHelper from '../client/sessionStorageHelper';\nimport { HttpResponse, IdxStatus, ProceedOptions } from '@okta/okta-auth-js';\nimport { EventErrorContext } from 'types/events';\nimport { CONFIGURED_FLOW } from '../client/constants';\nimport { ConfigError } from 'util/Errors';\nimport { updateAppState } from 'v2/client';\n\nexport interface ContextData {\n  controller: string;\n  formName: string;\n  authenticatorKey?: string;\n  methodType?: string;\n}\n\nexport default Controller.extend({\n  className: 'form-controller',\n\n  appStateEvents: {\n    'change:currentFormName': 'handleFormNameChange',\n    'afterError': 'handleAfterError',\n    'invokeAction': 'handleInvokeAction',\n    'saveForm': 'handleSaveForm',\n    'switchForm': 'handleSwitchForm',\n  },\n\n  preRender() {\n    this.removeChildren();\n  },\n\n  postRender() {\n    const currentViewState = this.options.appState.getCurrentViewState();\n    // TODO: add comments regarding when `currentViewState` would be null?\n    if (!currentViewState) {\n      return;\n    }\n\n    this.clearMetadata();\n\n    let formName = currentViewState.name;\n    if (formName === 'identify' && this.options.settings.get('flow') === CONFIGURED_FLOW.RESET_PASSWORD) {\n      formName = 'identify-recovery';\n    }\n    const TheView = ViewFactory.create(\n      formName,\n      this.options.appState.get('authenticatorKey'),\n    );\n    try {\n      this.formView = this.add(TheView, {\n        options: {\n          currentViewState,\n        }\n      }).last();\n    } catch (error) {\n      // This is the place where runtime error (NPE) happens at most of time.\n      // It has been swallowed by Q.js hence add try/catch to surface up errors.\n      this.options.settings.callGlobalError(error);\n      return;\n    }\n\n    this.triggerAfterRenderEvent();\n  },\n\n  clearMetadata() {\n    const formName = this.options.appState.get('currentFormName');\n    // TODO: OKTA-392835 shall not clear state handle at terminal page\n    if (TERMINAL_FORMS.includes(formName)) {\n      sessionStorageHelper.removeStateHandle();\n    }\n  },\n\n  triggerAfterRenderEvent() {\n    const contextData = this.createAfterEventContext();\n    this.trigger('afterRender', contextData);\n  },\n\n  handleFormNameChange() {\n    this.render();\n  },\n\n  handleAfterError(error: HttpResponse) {\n    const contextData = this.createAfterEventContext();\n    const errorContextData: EventErrorContext = {\n      xhr: error,\n      errorSummary: error.responseJSON && error.responseJSON.errorSummary,\n    };\n    // TODO: need some enhancement after https://github.com/okta/okta-idx-js/pull/27\n    // OKTA-318062\n    this.trigger('afterError', contextData, errorContextData);\n  },\n\n  createAfterEventContext(): ContextData {\n    const formName = this.options.appState.get('currentFormName');\n    const authenticatorKey = this.options.appState.get('authenticatorKey');\n    const methodType = this.options.appState.get('authenticatorMethodType');\n    const isPasswordRecoveryFlow = this.options.appState.get('isPasswordRecoveryFlow');\n\n    const v1ControllerClassName = getV1ClassName(\n      formName,\n      authenticatorKey,\n      methodType,\n      isPasswordRecoveryFlow,\n    );\n\n    const eventData: ContextData = {\n      controller: v1ControllerClassName,\n      formName,\n    };\n\n    if (authenticatorKey) {\n      eventData.authenticatorKey = authenticatorKey;\n    }\n    if (methodType) {\n      eventData.methodType = methodType;\n    }\n\n    return eventData;\n  },\n\n  handleSwitchForm(formName) {\n    // trigger formName change to change view\n    if (this.options.appState.get('messages')) {\n      // Clear messages before calling switch form.\n      // If a form has errors sent form API inside messages\n      // and user hits back to factors list which triggers switchForm,\n      // those error will show up on another screen that gets rendered after switchForm\n      this.options.appState.unset('messages');\n    }\n    this.options.appState.set('currentFormName', formName);\n  },\n\n  // eslint-disable-next-line max-statements\n  async handleInvokeAction(actionPath = '', actionParams = {}) {\n    const { appState, settings } = this.options;\n    const idx = appState.get('idx');\n    const { stateHandle } = idx.context;\n    let invokeOptions: ProceedOptions = {\n      exchangeCodeForTokens: false, // we handle this in interactionCodeFlow.js\n      stateHandle\n    };\n    let error;\n\n    // Cancel action is executes synchronously\n    if (actionPath === 'cancel') {\n      // TODO: resolve race conditions caused by event pattern: OKTA-490220\n      settings.getAuthClient().transactionManager.clear({ clearIdxResponse: false });\n      sessionStorageHelper.removeStateHandle();\n      appState.clearAppStateCache();\n\n      if (settings.get('oauth2Enabled')) {\n        // In this case we need to restart login flow and recreate transaction meta\n        // that will be used in interactionCodeFlow function\n        appState.trigger('restartLoginFlow');\n        return;\n      }\n    }\n\n    // Build options to invoke or throw error for invalid action\n    if (idx['neededToProceed'].find(item => item.name === actionPath)) {\n      invokeOptions = { ...invokeOptions, step: actionPath };\n    } else if (_.isFunction(idx['actions'][actionPath])) {\n      invokeOptions = {\n        ...invokeOptions,\n        actions: [{\n          name: actionPath,\n          params: actionParams\n        }]\n      };\n    } else {\n      error = new ConfigError(`Invalid action selected: ${actionPath}`);\n      this.options.settings.callGlobalError(error);\n      await this.showFormErrors(this.formView.model, error, this.formView.form);\n      return;\n    }\n\n    // action will be executed asynchronously\n    await this.invokeAction(invokeOptions);\n  },\n\n  async invokeAction(invokeOptions) {\n    const authClient = this.options.settings.getAuthClient();\n    let resp;\n    let error;\n    try {\n      resp = await authClient.idx.proceed(invokeOptions);\n      if (resp.requestDidSucceed === false) {\n        error = resp;\n      }\n    } catch (e) {\n      error = e;\n    }\n\n    // if request did not succeed, show error on the current form\n    if (error) {\n      await this.showFormErrors(this.formView.model, error, this.formView.form);\n      return;\n    }\n\n    // process response, may render a new form\n    await this.handleIdxResponse(resp);\n  },\n\n  // eslint-disable-next-line max-statements, complexity\n  async handleSaveForm(model) {\n    const formName = model.get('formName');\n\n    // Toggle Form saving status (e.g. disabling save button, etc)\n    this.toggleFormButtonState(true);\n    model.trigger('request');\n\n    // Use full page redirection if necessary\n    if (model.get('useRedirect')) {\n      // Clear when navigates away from SIW page, e.g. success, IdP Authenticator.\n      // Because SIW sort of finished its current /transaction/\n      sessionStorageHelper.removeStateHandle();\n\n      const currentViewState = this.options.appState.getCurrentViewState();\n      Util.redirectWithFormGet(currentViewState.href);\n      return;\n    }\n\n    // Run hook: transform the user name (a.k.a identifier)\n    const values = this.transformIdentifier(formName, model);\n\n    // Error out when this is not a remediation form. Unexpected Exception.\n    if (!this.options.appState.hasRemediationObject(formName)) {\n      this.options.settings.callGlobalError(`Cannot find http action for \"${formName}\".`);\n      await this.showFormErrors(this.formView.model, 'Cannot find action to proceed.', this.formView.form);\n      return;\n    }\n\n    // Reset password in identity-first flow needs some help to auto-select password and begin the reset flow\n    if (formName === 'identify' && this.options.settings.get('flow') === CONFIGURED_FLOW.RESET_PASSWORD) {\n      values.authenticator = 'okta_password';\n    }\n\n    // Submit request to idx endpoint\n    const authClient = this.options.settings.getAuthClient();\n    const idxOptions: ProceedOptions = {\n      exchangeCodeForTokens: false, // we handle this in interactionCodeFlow.js\n    };\n    try {\n      const idx = this.options.appState.get('idx');\n      const { stateHandle } = idx.context;\n      const resp = await authClient.idx.proceed({\n        ...idxOptions,\n        step: formName,\n        stateHandle,\n        ...values\n      });\n\n      if (resp.status === IdxStatus.FAILURE) {\n        throw resp.error; // caught and handled in this function\n      }\n      // follow idx transaction to render terminal view for session expired error\n      if (IonResponseHelper.isIdxSessionExpiredError(resp)) {\n        const authClient = this.settings.getAuthClient();\n        authClient.transactionManager.clear();\n        await this.handleIdxResponse(resp);\n        return;\n      }\n      // If the last request did not succeed, show errors on the current form\n      // Special case: Okta server responds 401 status code with WWW-Authenticate header and new remediation\n      // so that the iOS/MacOS credential SSO extension (Okta Verify) can intercept\n      // the response reaches here when Okta Verify is not installed\n      // we need to return an idx object so that\n      // the SIW can proceed to the next step without showing error\n      if (resp.requestDidSucceed === false && !resp.stepUp) {\n        await this.showFormErrors(model, resp, this.formView.form);\n        return;\n      }\n      const onSuccess = this.handleIdxResponse.bind(this, resp);\n      if (formName === FORMS.ENROLL_PROFILE) {\n        // call registration (aka enroll profile) hook\n        this.settings.postRegistrationSubmit(values?.userProfile?.email, onSuccess, (error) => {\n          model.trigger('error', model, {\n            responseJSON: error,\n          });\n        });\n      } else {\n        await onSuccess();\n      }\n    } catch(error) {\n      if (error.is?.('terminal')) {\n        this.options.appState.setNonIdxError(error);\n      } else {\n        await this.showFormErrors(model, error, this.formView.form);\n      }\n    } finally {\n      this.toggleFormButtonState(false);\n    }\n  },\n\n  transformIdentifier(formName, model) {\n    const modelJSON = model.toJSON();\n    if (Object.prototype.hasOwnProperty.call(modelJSON, 'identifier')) {\n      // The callback function is passed two arguments:\n      // 1) username: The name entered by the user\n      // 2) operation: The type of operation the user is trying to perform:\n      //      - PRIMARY_AUTH\n      //      - FORGOT_PASSWORD\n      //      - UNLOCK_ACCOUNT\n      const operation = FORM_NAME_TO_OPERATION_MAP[formName];\n      modelJSON.identifier = this.settings.transformUsername(modelJSON.identifier, operation);\n    }\n    return modelJSON;\n  },\n\n  /**\n   * @param model current form model\n   * @param error any errors after user action\n   * @param form current form\n   * Handle errors that get displayed right after any user action. After such form errors widget doesn't\n   * reload or re-render, but updates the AppSate with latest remediation.\n   */\n  async showFormErrors(model, error, form) {\n    /* eslint max-statements: [2, 24] */\n    let errorObj;\n    let idxStateError;\n    let showErrorBanner = true;\n    model.trigger('clearFormError');\n\n    if (!error) {\n      error = 'FormController - unknown error found';\n      this.options.settings.callGlobalError(error);\n    }\n\n    if(error?.rawIdxState) {\n      idxStateError = error;\n      error = error.rawIdxState;\n    }\n\n    if (IonResponseHelper.isIonErrorResponse(error)) {\n      errorObj = IonResponseHelper.convertFormErrors(error);\n    } else if (error.errorSummary) {\n      errorObj = { responseJSON: error };\n    } else {\n      Util.logConsoleError(error);\n      errorObj = { responseJSON: { errorSummary: loc('error.unsupported.response', 'login')}};\n    }\n\n    if(_.isFunction(form?.showCustomFormErrorCallout)) {\n      showErrorBanner = !form.showCustomFormErrorCallout(errorObj, idxStateError.messages);\n    }\n\n    // show error before updating app state.\n    model.trigger('error', model, errorObj, showErrorBanner);\n    idxStateError = Object.assign({}, idxStateError, {hasFormError: true});\n\n    // TODO OKTA-408410: Widget should update the state on every new response. It should NOT do selective update.\n    // For eg 429 rate-limit errors, we have to skip updating idx state, because error response is not an idx response.\n    if (Array.isArray(idxStateError?.neededToProceed) && idxStateError?.neededToProceed.length) {\n      await this.handleIdxResponse(idxStateError);\n    }\n  },\n\n  async handleIdxResponse(idxResp) {\n    await updateAppState(this.options.appState, idxResp);\n  },\n\n  /**\n   * SignIn widget has its own (hacky) way to customize the button disabled state:\n   * adding `link-button-disabled` despite the name was intend only to disable\n   * `link-button`.\n   * Instead of doing decent refactor, we want to follow the convention for now.\n   *\n   * @param {boolean} disabled whether add extra disable CSS class.\n   */\n  toggleFormButtonState: function(disabled) {\n    const button = this.$el.find('.o-form-button-bar .button');\n    button.toggleClass('link-button-disabled', disabled);\n  },\n});\n"],"names":["Controller","extend","className","appStateEvents","preRender","removeChildren","postRender","currentViewState","options","appState","getCurrentViewState","clearMetadata","formName","name","settings","get","CONFIGURED_FLOW","RESET_PASSWORD","TheView","ViewFactory","create","formView","add","last","error","callGlobalError","triggerAfterRenderEvent","TERMINAL_FORMS","includes","sessionStorageHelper","removeStateHandle","contextData","createAfterEventContext","trigger","handleFormNameChange","render","handleAfterError","errorContextData","xhr","errorSummary","responseJSON","authenticatorKey","methodType","isPasswordRecoveryFlow","v1ControllerClassName","getV1ClassName","eventData","controller","handleSwitchForm","unset","set","handleInvokeAction","actionPath","actionParams","idx","stateHandle","context","invokeOptions","exchangeCodeForTokens","getAuthClient","transactionManager","clear","clearIdxResponse","clearAppStateCache","find","item","step","_","isFunction","actions","params","ConfigError","showFormErrors","model","form","invokeAction","authClient","resp","proceed","requestDidSucceed","e","handleIdxResponse","handleSaveForm","toggleFormButtonState","Util","redirectWithFormGet","href","values","transformIdentifier","hasRemediationObject","authenticator","idxOptions","status","IdxStatus","FAILURE","IonResponseHelper","isIdxSessionExpiredError","stepUp","onSuccess","bind","FORMS","ENROLL_PROFILE","postRegistrationSubmit","userProfile","email","is","setNonIdxError","modelJSON","toJSON","Object","prototype","hasOwnProperty","call","operation","FORM_NAME_TO_OPERATION_MAP","identifier","transformUsername","errorObj","idxStateError","showErrorBanner","rawIdxState","isIonErrorResponse","convertFormErrors","logConsoleError","loc","showCustomFormErrorCallout","messages","assign","hasFormError","Array","isArray","neededToProceed","length","idxResp","updateAppState","disabled","button","$el","toggleClass"],"mappings":"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"}